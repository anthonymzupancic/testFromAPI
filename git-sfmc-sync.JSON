{
  "534001218": {
    "contentBuilder": [
      {
        "id": 110233,
        "bldrId": "e6755947-93ad-414a-89fa-ae3e8d33ca68",
        "name": "functions",
        "customerKey": "04ec9b8d-c529-45c3-8f62-2d4461f50755",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105287,
          "name": "backend",
          "parentId": 105286,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/backend"
        },
        "content": "<script runat=\"server\">\n  Platform.Load('core', '1.1')\n\n  //updated comment\n</script>"
      },
      {
        "id": 110234,
        "bldrId": "057e53ff-8507-4f31-ba37-a5fddffad45b",
        "name": "app_configuration",
        "customerKey": "5ad9274d-616e-47a9-bd01-f3655b4ec385",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105288,
          "name": "configurations",
          "parentId": 105286,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/configurations"
        },
        "content": "{\n  \"branding\": {\n    \"brandName\": \"Basetime\",\n    \"websiteURL\": \"https://basetime.io\",\n    \"supportDarkMode\": \"true\",\n    \"default\": {\n      \"logo\": \"https://www.ikea.com/us/en/static/ikea-logo.f7d9229f806b59ec64cb.svg\",\n      \"colors\": {\n        \"primary\": \"#00FFFF\",\n        \"secondary\": \"blue\",\n        \"accent\": \"yellow\",\n        \"paper\": \"#fff\"\n      }\n    },\n    \"dark\": {\n      \"logo\": \"https://basetime.io/basetime-developer-network-logo.svg\",\n      \"colors\": {\n        \"primary\": \"#aadeeb\", \n        \"secondary\": \"#0098bc\",\n        \"accent\": \"#fc6833\",\n        \"paper\": \"#0f1d20\"\n      }\n    }\n  },\n  \"map\": {\n    \"content_block\": {\n      \"app_configuration\": \"\",\n      \"preference_options\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\configurations\\\\preference_options\",\n      \"component_imports\": \"\",\n      \"branding_bar\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\frontend\\\\components\\\\branding_bar\",\n      \"channel_drawer\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\frontend\\\\components\\\\channel_drawer\",\n      \"preference_form\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\frontend\\\\components\\\\preference_form\",\n      \"unauthorized_user\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\frontend\\\\components\\\\unauthorized_user\",\n      \"submit_button_animation\": \"'Content Builder\\\\Basetime Preference Center_demo_11\\\\frontend\\\\styles\\\\submit_button_animation\",\n      \"app_js\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\frontend\\\\app_js\",\n      \"subscriber_validation\": \"\",\n      \"backend_api\": \"\",\n      \"ssjs\": {\n        \"wsProxy\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\lib\\\\ssjs\\\\wsProxy\",\n        \"utils\": \"Content Builder\\\\Basetime Preference Center_demo_11\\\\lib\\\\ssjs\\\\utils\"\n      }\n    },\n    \"data_extension\": {\n      \"preferenceCenterExternalKey\": \"A89D62BA-3F5F-400C-B0E9-979FD11948EF\"\n    }\n  },\n  \"apiBaseURL\": \"https://cloud.emailmarketingunderstood.com/basetimepreferenceapi\",\n}"
      },
      {
        "id": 110235,
        "bldrId": "38e135ce-c7a5-48a9-9a5f-2e678b273b78",
        "name": "app_html",
        "customerKey": "4d2f3eb9-04bb-4f77-9ef2-f6b0c60eaf9e",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105289,
          "name": "frontend",
          "parentId": 105286,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend"
        },
        "content": "<v-app>\n  <v-main>\n    <v-row overflow=\"hidden\">\n      <v-col cols=\"12\">\n        <branding-bar @update-dark-mode=\"onUpdateDarkMode\" :application-configuration=\"applicationConfiguration\" :dark-mode=\"darkMode\" :branding=\"branding\"></branding-bar>\n      </v-col>\n    </v-row>\n    <v-row v-if=\"authorized\">\n      <v-col cols=\"2\">\n        <channel-drawer @update-channel-selection=\"onUpdateChannelSelection\" :channels=\"channels\" :branding=\"branding\"\n          :preference-options=\"preferenceOptions\"></channel-drawer>\n      </v-col>\n      <v-col cols=\"10\">\n        <preference-form @submit-preference-form=\"onSubmitPreferenceForm\" :channels=\"channels\" :subscriber-preferences=\"subscriber.preferences\" :form-submitting=\"formSubmitting\"\n          :branding=\"branding\" :preference-options=\"preferenceOptions\" :channel-selection=\"channelSelection\">\n        </preference-form>\n      </v-col>\n    </v-row>\n    <v-row v-else>\n      <unauthorized-user :branding=\"branding\" :unauthorized=\"preferenceOptions.unauthorized\">\n      </unauthorized-user>\n    </v-row>\n  </v-main>\n</v-app>"
      },
      {
        "id": 110236,
        "bldrId": "5ff4c966-3987-4189-bcae-eb0c4daf9541",
        "name": "app_js",
        "customerKey": "f43a7e3d-905b-490d-afa9-4d71b5373758",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105289,
          "name": "frontend",
          "parentId": 105286,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend"
        },
        "content": "new Vue({\n  el: '#app',\n  vuetify: new Vuetify(),\n  data() {\n    return {\n      authorized: isAuthorized === 1 ? true : false,\n      darkMode: false,\n      debug: true,\n      channels: [],\n      applicationConfiguration,\n      preferenceOptions,\n      channelSelection,\n      formSubmitting: false,\n      subscriber: {\n        subscriberId: subscriberId,\n        subscriberKey: subscriberKey,\n        emailAddress: emailAddress,\n        jobId: jobId,\n        preferences: []\n      }\n    }\n  },\n  beforeMount() {\n    this.getPreferenceChannels();\n  },\n  mounted() {\n    this.debug && this.debugData();\n    this.getExistingPreferences();\n  },\n  methods: {\n    debugData() {\n      console.log({\n        config: this.applicationConfiguration,\n        preferenceOptions: this.preferenceOptions\n      })\n    },\n    getPreferenceChannels(preferenceOptions) {\n      this.channels = Object.keys(this.preferenceOptions.channels)\n    },\n    getDefaultChannelSelection() {\n      const channels = this.channels;\n      this.channelSelection = channels[0];\n    },\n    async getExistingPreferences() {\n      try {\n        const subscriberId = this.subscriber.subscriberId;\n        const submitRequest = await axios.post(`${this.apiBaseURL}getCurrentPreferences`, {\n          subscriberId\n        })\n\n        console.log(submitRequest)\n\n        if (submitRequest.data.Status === 'OK') {\n          this.subscriber.preferences = submitRequest.data.Results;\n        }\n\n      } catch (err) {\n        console.log(err)\n      }\n    },\n    onUpdateDarkMode() {\n      this.darkMode = !this.darkMode\n    },\n    onUpdateChannelSelection($event) {\n      this.channelSelection = $event\n    },\n    async onSubmitPreferenceForm($event) {\n      try {\n        const channels = this.channels;\n        const postData = [];\n\n        console.log($event)\n\n        for (const c in channels) {\n          const channel = channels[c];\n          let channelProperties = new Array();\n\n          if (Object.prototype.hasOwnProperty.call($event, 'profile')) {\n            const profileData = $event.profile;\n\n            if (profileData.hasUpdatedValues) {\n              channelProperties.push({\n                Name: 'profileUpdatedDate',\n                Value: new Date()\n              })\n\n\n              for (const pro in profileData) {\n                channelProperties.push({\n                  Name: pro,\n                  Value: profileData[pro]\n                })\n              }\n            }\n\n          }\n\n\n          if (Object.prototype.hasOwnProperty.call($event[channel], 'preferences')) {\n            const preferenceData = $event[channel]['preferences'];\n\n            if (preferenceData.hasUpdatedValues) {\n              channelProperties.push({\n                Name: 'preferenceUpdatedDate',\n                Value: new Date()\n              })\n\n              for (const pre in preferenceData) {\n                channelProperties.push({\n                  Name: pre,\n                  Value: preferenceData[pre]\n                })\n              }\n            }\n\n          }\n\n\n\n          if (Object.prototype.hasOwnProperty.call($event[channel], 'subscriptions')) {\n            const subscriptionObject = $event[channel]['subscriptions'];\n            const subscriptionsData = subscriptionObject.subscriptions;\n\n            if (subscriptionObject.hasUpdatedValues) {\n              channelProperties.push({\n                Name: 'subscriptionsUpdatedDate',\n                Value: new Date()\n              })\n\n              let subscriptions = ''\n              for (const sub of subscriptionsData) {\n                subscriptions += `${sub}|`\n              }\n\n              subscriptions = subscriptions.substring(0, subscriptions.length - 1)\n              channelProperties.push({\n                Name: 'subscriptions',\n                Value: subscriptions\n              })\n            }\n          }\n\n          if (\n            $event[channel]['subscriptions']['hasUpdatedValues'] ||\n            $event[channel]['preferences']['hasUpdatedValues'] ||\n            $event['profile']['hasUpdatedValues']\n          ) {\n            channelProperties.push(\n              {\n                Name: 'subscriberId',\n                Value: this.subscriber.subscriberId\n              },\n              {\n                Name: 'emailAddress',\n                Value: this.subscriber.emailAddress\n              },\n              {\n                Name: 'channel',\n                Value: channel\n              })\n          }\n\n          let propertyArray = channelProperties.map(prop => prop.Name !== 'hasUpdatedValues' && prop)\n\n          if (propertyArray.length) {\n            postData.push(propertyArray.filter(Boolean))\n          }\n\n          channelProperties = new Array();\n        }\n\n        const submitRequest = await axios.post(`${this.apiBaseURL}submitPreferenceForm`, {\n          postData\n        })\n\n        if(submitRequest.data.Status === 'OK'){\n          this.getExistingPreferences();\n        }\n  \n\n      } catch (err) {\n        console.log(err)\n      }\n    }\n  },\n  computed: {\n    apiBaseURL() {\n      return `${this.applicationConfiguration.apiBaseURL}?action=`\n    },\n    branding() {\n      if (this.applicationConfiguration.branding.supportDarkMode && this.darkMode) {\n        return this.applicationConfiguration.branding.dark\n      }\n\n      return this.applicationConfiguration.branding.default\n    }\n  }\n})"
      },
      {
        "id": 110237,
        "bldrId": "3967ba25-d71a-4dab-b7f1-bdfadd87d78d",
        "name": "channel_drawer",
        "customerKey": "48c2a823-332a-4e06-b314-8014ad8dfc09",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105290,
          "name": "components",
          "parentId": 105289,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend/components"
        },
        "content": "/*\nWhat is this component?\n*/\nVue.component('channel-drawer', {\n  props: {\n    preferenceOptions: Object,\n    branding: Object,\n    channels: Array\n  },\n  methods: {\n    getChannelIcon: function (channel, preferenceOptions) {\n      return this.preferenceOptions['channels'][channel]['icon']\n    }\n  },\n  data() {\n    return {\n      right: null,\n    }\n  },\n  template: `\n  <div>\n    <v-navigation-drawer \n      permanent\n      max-height=\"100vh\"\n      height=\"80vh\"\n    >\n      <v-list dense nav>\n        <v-list-item v-for=\"channel in channels\" :key=\"channel\"  @click=\"$emit('update-channel-selection', channel)\" link>\n          <v-list-item-icon>\n            <v-icon\n              large\n              :color=\"branding.colors.accent\"\n            >{{ getChannelIcon(channel, this.preferenceOptions) }}</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title class=\"text-h6 mb-8\">{{ channel }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n    </v-navigation-drawer>\n</div>\n`\n})"
      },
      {
        "id": 110238,
        "bldrId": "657ff68a-9606-427b-b311-89d11291d7b9",
        "name": "preference_options",
        "customerKey": "e7e20f18-1df9-4b23-9544-189c0df3e524",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105288,
          "name": "configurations",
          "parentId": 105286,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/configurations"
        },
        "content": "{\n  \"profile\": {\n    \"headline\": \"Update your profile\",\n    \"copy\": \"\",\n    \"inputs\": [\n      {\n        \"type\": \"text\",\n        \"label\": \"First Name\",\n        \"name\": \"firstName\"      \n      },\n      {\n        \"type\": \"text\",\n        \"label\": \"Last Name\",\n        \"name\": \"lastName\"\n      },\n      {\n        \"component\": \"v-col\",\n        \"class\": \"d-flex\",\n        \"children\": [\n          {\n            \"type\": \"select\",\n            \"class\": \"mr-3\",\n            \"name\": \"country_code\",\n            \"label\": \"Code\",\n            \"value\": \"1\",\n            \"options\": {\n              \"1\": \"+1\",\n              \"49\": \"+49\",\n              \"55\": \"+55\"\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"label\": \"Phone number\",\n            \"name\": \"phone\",\n            \"inputmode\": \"numeric\",\n            \"pattern\": \"[0-9]*\",\n            \"validation\": \"matches:/^[0-9-]+$/\",\n            \"validation-messages\": {\n              \"matches\": \"Phone number should only include numbers and dashes.\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  \"channels\": {\n    \"email\": {\n      \"icon\": \"mdi-email\",\n      \"preferences\": {\n        \"headline\": \"Email Preferences\",\n        \"copy\": \"Please select your email preferences below\",\n        \"radios\": [\n          {\n            \"value\": \"onceAWeek\",\n            \"label\": \"Once A Week\"\n          },\n          {\n            \"value\": \"holidays\",\n            \"label\": \"Holidays Only\"\n          },\n          {\n            \"value\": \"specialEvents\",\n            \"label\": \"Special Events Only\"\n          },\n          {\n            \"value\": \"unsubscribe\",\n            \"label\": \"Unsubscribe Me From All Emails\"\n          }\n        ]\n      },\n      \"subscriptions\": {\n        \"headline\": \"Email Subscriptions\",\n        \"copy\": \"Please select your email subscriptions below\",\n        \"inputs\": [],\n        \"checkboxes\": [\n          {\n            \"value\": \"dailyNewsletter\",\n            \"label\": \"Daily Newsletter\"\n          },\n          {\n            \"value\": \"devChat\",\n            \"label\": \"Developer Chat\"\n          },\n          {\n            \"value\": \"devOps\",\n            \"label\": \"Developer Ops Weekly\"\n          }\n        ]\n      }\n    },\n    \"sms\": {\n      \"icon\": \"mdi-android-messages\",\n      \"preferences\": {\n        \"headline\": \"SMS Preferences\",\n        \"copy\": \"Please select your text message preferences below\",\n        \"radios\": [\n          {\n            \"value\": \"onceAWeek\",\n            \"label\": \"Once A Week\"\n          },\n          {\n            \"value\": \"holidays\",\n            \"label\": \"Holidays Only\"\n          },\n          {\n            \"value\": \"specialEvents\",\n            \"label\": \"Special Events Only\"\n          },\n          {\n            \"value\": \"unsubscribe\",\n            \"label\": \"Unsubscribe Me From All Emails\"\n          }\n        ]\n      },\n      \"subscriptions\": {\n        \"headline\": \"SMS Subscriptions\",\n        \"copy\": \"Please select your text message subscriptions below\",\n        \"inputs\": [],\n        \"checkboxes\": [\n          {\n            \"value\": \"dailyNewsletter\",\n            \"label\": \"Daily Newsletter\"\n          },\n          {\n            \"value\": \"devChat\",\n            \"label\": \"Developer Chat\"\n          },\n          {\n            \"value\": \"devOps\",\n            \"label\": \"Developer Ops Weekly\"\n          }\n        ]\n      }\n    }\n  },\n  \"unauthorized\": {\n    \"icon\": \"mdi-account-question\",\n    \"copy\": \"Looks like we can't find you in your system. <br> Please ensure you've reached this page from a basetime.io email. <br><br> Visit <a href='basetime.io'>Basetime.io</a> to sign up for emails.\"\n  },\n  \"legal\": {\n    \"icon\": \"mdi-account-question\",\n    \"copy\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n  }\n}\n"
      },
      {
        "id": 110239,
        "bldrId": "27d54f34-aa25-4d96-acf7-9dca6cf10a82",
        "name": "branding_bar",
        "customerKey": "fff302ae-8438-4ee0-a144-2bc3e2bf9bc7",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105290,
          "name": "components",
          "parentId": 105289,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend/components"
        },
        "content": "/*\nWhat is this component?\n*/\nVue.component('branding-bar', {\nprops: {\nbranding: Object,\napplicationConfiguration: Object\n},\nmounted() {\n\n},\ndata() {\nreturn {\ndarkModeToggle: false\n}\n},\nwatch: {\n\n},\nmethods: {\n\n},\ntemplate: `\n<div>\n  <v-card>\n    <v-app-bar :color=\"branding.colors.paper\" position=\"absolute\" height=\"100\">\n      <!-- <v-app-bar-nav-icon></v-app-bar-nav-icon> -->\n\n      <v-toolbar-title>\n        <v-img height=\"100%\" width=\"auto\" :src=\"branding.logo\"></v-img>\n      </v-toolbar-title>\n\n      <v-spacer></v-spacer>\n      \n      <v-switch v-show=\"applicationConfiguration.branding.supportDarkMode\" :color=\"branding.colors.accent\" @click=\"$emit('update-dark-mode')\" v-model=\"darkModeToggle\">\n        <template v-slot:label>\n          <v-icon v-if=\"darkModeToggle\" large color=\"#F5F5F5\">\n            mdi-moon-waxing-crescent\n          </v-icon>\n          <v-icon v-else large color=\"#616161\">\n            mdi-white-balance-sunny\n          </v-icon>\n        </template>\n      </v-switch>\n\n    </v-app-bar>\n  </v-card>\n</div>\n`\n})"
      },
      {
        "id": 110240,
        "bldrId": "baa3763f-a2e1-47eb-b8be-ddeb03732bff",
        "name": "preference_form",
        "customerKey": "5e72e715-dd35-46de-b4c6-aa155b7d8aa9",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105290,
          "name": "components",
          "parentId": 105289,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend/components"
        },
        "content": "\n\n/*\nWhat is this component?\n*/\nVue.component('preference-form', {\n  props: {\n    branding: Object,\n    preferenceOptions: Object,\n    channels: Array,\n    channelSelection: String,\n    formSubmitting: Boolean,\n    subscriberPreferences: Array\n  },\n  beforeMount() {\n\n    this.setFormInputSchema();\n    this.setProfileFormSchema();\n    this.setPreferenceFormSchema();\n    this.setSubscriptionFormSchema();\n\n    this.setFormInputValues('preferences')\n    this.setFormInputValues('subscriptions')\n  },\n  data() {\n    return {\n      profileFormSchema: [],\n      preferenceFormSchema: [],\n      subscriptionFormSchema: [],\n      formInputs: {}\n    }\n  },\n  methods: {\n    submitPreferenceForm() {\n      const channels = this.channels;\n      let emit = this.formInputs\n      emit.profile.hasUpdatedValues = this.checkForUpdatedValues(emit.profile, this.channelPreferences)\n\n      for (const c in channels) {\n        const channel = channels[c];\n        const channelPreferences = this.setChannelPreferences(channel);\n        const subscriptions = channelPreferences.subscriptions.split(\"|\")\n\n        emit[channel]['preferences']['hasUpdatedValues'] = this.checkForUpdatedValues(emit[channel]['preferences'], channelPreferences)\n\n        emit[channel]['subscriptions']['hasUpdatedValues'] = this.checkForUpdatedValues(emit[channel]['subscriptions'].subscriptions, subscriptions)\n      }\n\n      this.$emit('submit-preference-form', emit)\n    },\n    checkForUpdatedValues(updateObject, existingObject) {\n      \n      for (const u in updateObject) {\n        const updatedProfileValue = updateObject[u];\n        const existingProfileValue = existingObject[u];\n\n        if(u !== 'hasUpdatedValues'){\n          if (updatedProfileValue !== existingProfileValue) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    setProfileFormSchema() {\n      let profileSchema = [\n        {\n          \"component\": \"h2\",\n          \"children\": `${this.preferenceOptions['profile']['headline']}`\n        },\n        {\n          \"component\": \"p\",\n          \"children\": `${this.preferenceOptions['profile']['copy']}`\n        }\n      ]\n\n      if (\n        Object.prototype.hasOwnProperty.call(this.preferenceOptions.profile, 'inputs')\n      ) {\n        const profileData = this.preferenceOptions.profile.inputs;\n\n        for (const pro in profileData) {\n          let inputObject = profileData[pro];\n          this.formInputs['profile'][inputObject.name] = this.channelPreferences[inputObject.name];\n\n          profileSchema.push(inputObject)\n        }\n      }\n\n      this.profileFormSchema = profileSchema\n    },\n    setPreferenceFormSchema() {\n      let preferenceSchema = [\n        {\n          \"component\": \"h2\",\n          \"children\": `${this.preferenceChannelConfiguration['preferences']['headline']}`\n        },\n        {\n          \"component\": \"p\",\n          \"children\": `${this.preferenceChannelConfiguration['preferences']['copy']}`\n        }\n      ]\n\n      if (\n        Object.prototype.hasOwnProperty.call(this.preferenceChannelConfiguration['preferences'], 'radios')\n      ) {\n        preferenceSchema.push({\n          \"name\": \"preference\",\n          \"type\": \"radio\",\n          \"options\": this.preferenceChannelConfiguration['preferences']['radios']\n        })\n      }\n\n      this.preferenceFormSchema = preferenceSchema\n    },\n    setSubscriptionFormSchema() {\n      let subscriptionSchema = [\n        {\n          \"component\": \"h2\",\n          \"children\": `${this.preferenceChannelConfiguration['subscriptions']['headline']}`\n        },\n        {\n          \"component\": \"p\",\n          \"children\": `${this.preferenceChannelConfiguration['subscriptions']['copy']}`\n        }\n      ]\n\n      if (!Object.prototype.hasOwnProperty.call(this.formInputs[channelSelection], 'subscriptions')) {\n        this.formInputs[channelSelection]['subscriptions'] = {};\n      }\n\n\n      if (\n        Object.prototype.hasOwnProperty.call(this.preferenceChannelConfiguration['subscriptions'], 'checkboxes')\n      ) {\n        subscriptionSchema.push({\n          \"name\": \"subscriptions\",\n          \"type\": \"checkbox\",\n          \"options\": this.preferenceChannelConfiguration['subscriptions']['checkboxes']\n        })\n      }\n\n      this.subscriptionFormSchema = subscriptionSchema\n    },\n    setFormInputSchema() {\n      this.formInputs = {\n        profile: {}\n      };\n\n      this.channels.forEach(channel => {\n        this.formInputs[channel] = {}\n      })\n    },\n    setFormInputValues(objectKey) {\n      const channels = this.channels;\n\n      for (const c in channels) {\n        switch (objectKey) {\n          case 'preferences':\n            if (!Object.prototype.hasOwnProperty.call(this.formInputs[channels[c]], 'preferences')) {\n              this.formInputs[channels[c]]['preferences'] = {};\n            }\n\n            this.formInputs[channels[c]]['preferences']['preference'] = this.setChannelPreferences(channels[c])['preference'];\n            break;\n          case 'subscriptions':\n            if (!Object.prototype.hasOwnProperty.call(this.formInputs[channels[c]], 'subscriptions')) {\n              this.formInputs[channels[c]]['subscriptions'] = {};\n            }\n\n            this.formInputs[channels[c]]['subscriptions']['subscriptions'] = this.setChannelPreferences(channels[c])['subscriptions'].split(\"|\") || [];\n            break;\n        }\n      }\n\n    },\n    setChannelPreferences(channel) {\n      return this.subscriberPreferences.find((pref) => pref.channel === channel)\n    }\n  },\n  watch: {\n    channelSelection: function (newVal, oldVal) {\n      this.setProfileFormSchema();\n      this.setPreferenceFormSchema();\n      this.setSubscriptionFormSchema();\n    }\n  },\n  computed: {\n    preferenceChannelConfiguration() {\n      if (this.channelSelection) {\n        return this.preferenceOptions['channels'][this.channelSelection]\n      }\n    },\n    channelPreferences() {\n      if (this.channelSelection) {\n        return this.subscriberPreferences.find((pref) => pref.channel === this.channelSelection)\n      }\n    },\n  },\n  template: `\n<section>\n  <v-row class=\"flex\">\n    <v-col cols=\"12\" class=\"justify-center\">\n      <div v-show=\"preferenceOptions.profile.inputs\">\n        <formulate-form :values=\"formInputs['profile']\" v-model=\"formInputs['profile']\" :schema=\"profileFormSchema\" />\n      </div>\n    </v-col>\n  </v-row>\n\n  <v-row>\n    <v-col cols=\"12\" md=\"8\">\n      <v-divider class=\"my-5\"></v-divider>\n    </v-col>\n  </v-row>\n\n  <v-row class=\"flex\">\n    <v-col cols=\"12\" md=\"4\" class=\"mb-xs-4 mb-md-0\">\n      <div v-show=\"channelSelection\">\n        <formulate-form :values=\"formInputs[channelSelection]['preferences']\" v-model=\"formInputs[channelSelection]['preferences']\" :schema=\"preferenceFormSchema\" />\n      </div>\n    </v-col>\n    <v-col cols=\"12\" md=\"4\">\n      <div v-show=\"channelSelection\">\n        <formulate-form :values=\"formInputs[channelSelection]['subscriptions']\" v-model=\"formInputs[channelSelection]['subscriptions']\" :schema=\"subscriptionFormSchema\" />\n      </div>\n    </v-col>\n  </v-row>\n\n  <v-row>\n    <v-col cols=\"12\" md=\"8\">\n      <v-btn class=\"ma-2\" :loading=\"formSubmitting\" :disabled=\"formSubmitting\" color=\"info\" @click=\"submitPreferenceForm\">\n        Submit Updates\n        <template v-slot:loader>\n          <span class=\"custom-loader\">\n            <v-icon light>mdi-cached</v-icon>\n          </span>\n        </template>\n      </v-btn>\n    </v-col>\n  </v-row>\n</section>\n`\n})"
      },
      {
        "id": 110241,
        "bldrId": "59de2f16-bffa-4105-b4d1-30ae4ac5c8ea",
        "name": "submit_button_animation",
        "customerKey": "740ad778-a53e-425b-b9d7-6cedc8b79757",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105291,
          "name": "styles",
          "parentId": 105289,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend/styles"
        },
        "content": "<style>\n  .custom-loader {\n    animation: loader 1s infinite;\n    display: flex;\n  }\n  @-moz-keyframes loader {\n    from {\n      transform: rotate(0);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes loader {\n    from {\n      transform: rotate(0);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n  @-o-keyframes loader {\n    from {\n      transform: rotate(0);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes loader {\n    from {\n      transform: rotate(0);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n</style>"
      },
      {
        "id": 110242,
        "bldrId": "93d9db7f-e7ea-47d9-8c3d-7163b4043216",
        "name": "wsProxy",
        "customerKey": "21a6dbc4-5270-4a66-88b5-20996f5555e6",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105293,
          "name": "ssjs",
          "parentId": 105292,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/lib/ssjs"
        },
        "content": "<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1\");\n\n  function wsProxy() {\n    var prox = new Script.Util.WSProxy();\n    var fn = {};\n\n    /*******************************\n     * @config {<Object>}\n     * @continueRequest {Boolean}\n     * @return {Array}\n     ******************************/\n    fn.retrieve = function (config, continueRequest) {\n\n      var reqID;\n      var moreData = true;\n      var continueRequest = continueRequest ? continueRequest : false;\n      var obj = config.soapObjName ? config.soapObjName : null;\n      var opts = config.opts ? config.opts : {};\n      var props = config.props ? config.props : {};\n      var filter = config.filter ? config.filter : {};\n      var cols = config.cols ? config.cols : null;\n      var mid = config.mid ? config.mid : null;\n      // prox = mid ? util.proxyContext(prox, mid) : prox;\n\n      if (!config) { return 'configuration required'; }\n      if (!obj) { return 'SOAP object is required'; }\n\n      var resultsOut = [];\n\n      var data = prox.retrieve(obj, cols, filter, opts, props)\n\n      return data\n\n    } // end retrieve\n\n    /*******************************\n     * @config {Object}\n     * @return {Object}\n     ******************************/\n    fn.update = function (config) {\n      var obj = config.soapObjName ? config.soapObjName : null;\n      var payload = config.payload ? config.payload : null;\n      var options = config.options ? config.options : null;\n      var mid = config.mid ? config.mid : null;\n      // prox = mid ? utils.proxyContext(prox, mid) : prox;\n\n      if (!config) { return 'configuration required'; }\n      if (!obj) { return 'SOAP object is required'; }\n      if (!payload) { return 'payload is required'; }\n\n      var batch = fns.utils.isArray(payload)\n\n      if (batch) {\n        var res = prox.updateBatch(obj, payload, options);\n      } else {\n        var res = prox.updateItem(obj, payload, options);\n      }\n\n      return res;\n    } // end update\n\n\n    return fn\n  }\n\n</script>"
      },
      {
        "id": 110243,
        "bldrId": "fe365070-1d99-438e-b942-af1426d679bc",
        "name": "subscriber_validation",
        "customerKey": "b7ef195d-6c00-4160-a6d4-dbd912bc4385",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105294,
          "name": "validation",
          "parentId": 105292,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/lib/validation"
        },
        "content": "%%[\n  set @subscriberkey = AttributeValue(\"_subscriberkey\")\n  set @subscriberid = AttributeValue(\"subscriberid\")\n  set @emailAddress = AttributeValue(\"emailaddr\")\n  set @jobid = AttributeValue(\"jobid\")\n]%%\n\n<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n\n  var subscriberKey = Stringify(Variable.GetValue(\"@subscriberkey\"));\n  var subscriberId = Variable.GetValue(\"@subscriberid\");\n  var emailAddress = Stringify(Variable.GetValue(\"@emailAddress\"));\n  var jobId = Variable.GetValue(\"@jobid\");\n\n  var authorized = 0;\n  if(subscriberId !== 0 && jobId !== 0) {\n    authorized = 1;\n  }\n\n  Write(authorized)\n\n  authorized = 1\n\n</script>"
      },
      {
        "id": 110244,
        "bldrId": "5b9fec2c-b1ce-49e9-bfd6-6a13598f593c",
        "name": "unauthorized_user",
        "customerKey": "1d23a8f0-b840-42f7-9b06-64a206c56bbd",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105290,
          "name": "components",
          "parentId": 105289,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend/components"
        },
        "content": "/*\nWhat is this component?\n*/\nVue.component('unauthorized-user', {\nprops: {\n  unauthorized: Object,\n  branding: Object\n},\nmounted() {\n\n},\ndata() {\nreturn {\n\n}\n},\nwatch: {\n\n},\nmethods: {\n\n},\ntemplate: `\n<v-col cols=\"10\" class=\"flex text-center mx-auto\">\n  <v-row justify=\"space-around\">\n    <v-icon :color=\"branding.colors.accent\" size=\"200\" aria-label=\"My Account\" role=\"img\" aria-hidden=\"false\">\n      {{unauthorized.icon}}\n    </v-icon>\n  </v-row>\n  <v-row justify=\"space-around\">\n    <v-col cols=\"8\" class=\"text-h6 text-md-h5\">\n      <span v-html=\"unauthorized.copy\"></span>\n    </v-col>\n  </v-row>\n\n</v-col>\n`\n})"
      },
      {
        "id": 110245,
        "bldrId": "4cb062e6-290f-4dcb-bf43-d43c74b551f9",
        "name": "utils",
        "customerKey": "b5f63f44-3f06-476f-9972-3e788a1c9ac5",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105293,
          "name": "ssjs",
          "parentId": 105292,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/lib/ssjs"
        },
        "content": "<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n\n  function util() {\n    var fn = {}\n\n    fn.isArray = function (arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\n\n    fn.response = function (arg) {\n      Write(Stringify(arg))\n    }\n\n\n    fn.proxyContext = function (prox, mid) {\n      if (mid) {\n        //reset previous settings\n        prox.resetClientIds();\n        // Set ClientID \n        prox.setClientId({\n          \"ID\": mid\n        });\n      }\n      return prox\n    }\n\n\n    fn.deBug = function (action, response, logExtKey, debug) {\n      if (response) {\n        debug ? Write(\"<br><b>\" + action + \":</b><br> \" + Stringify(response) + \"<br><br>\") : null;\n      } else {\n        debug ? Write(\"<br><b>\" + action + \"</b><br> \") : null;\n      }\n\n      if (logExtKey) {\n        var log = {\n          action: action ? action : null,\n          log: response ? response : null\n        }\n\n        addLog(log, logExtKey);\n      }\n    }\n\n\n    /***********************************************\n     *\n     *   function addLog()\n     *   Pushes logging object to array to be written to a Data Extension\n     *   \n     *    @param obj {Object} logging object that matches the data extension\n     *    @param logExtKey {String} External Key to log records to\n     *    \n     ***********************************************/\n    fn.addLog = function (obj, logExtKey) {\n      var logDE = DataExtension.Init(logExtKey);\n      var logAction = logDE.Rows.Add(obj);\n    };\n\n\n\n    /*\n      getDERecords Function\n       Retrieves rows from a Data Extension\n       \n        Dependencies:\n           - DEData Function\n        @config {object} object with payload for wsProxy call\n       \n       //Sample Usage\n       \n       var config = {\n         deName: \"Data Extension Name\",\n         col: [],\n         filter: {\n           Property: \"EmailAddress\",\n           SimpleOperator: \"isNotNull\",\n           Value: \"\"\n         },\n         opts: {\n           BatchSize: 10\n         }\n       };\n           \n       var data = getDERecords(config);\n       \n       //optional//\n       If only specific fields are needed, add a cols array of those fields.\n       When no cols key is included, function will get all fields.\n       \n       var config = {\n         deName: \"Data Extension Name\",\n         cols: [\"EmailAddress\", \"SubscriberKey\"]\n         filter: {\n           Property: \"EmailAddress\",\n           SimpleOperator: \"isNotNull\",\n           Value: \"\"\n         },\n         opts: {\n           BatchSize: 10\n         }\n       };\n       \n    */\n    fn.getDERecords = function (config, fns) {\n\n      var deConfig = {\n        soapObjName: \"DataExtensionObject[\" + config.dataExtensionKey + \"]\"\n      };\n\n      deConfig.cols = config.cols.length > 0 ? config.cols : fns.utils.getFieldNames(config.dataExtensionKey);\n      if (config.filter) { deConfig.filter = config.filter; };\n      if (config.opts) { deConfig.opts = config.opts; };\n\n      var deRecords = fns.wsProxy.retrieve(deConfig);\n      return deRecords;\n    };\n\n\n\n\n    /***********************************************\n    *\n    *   function getFieldNames()\n    *   Gets all columns from a SOAP Object\n    *\n    *    @peram {deName} Name of DataExtension to get columns\n    *\n    *    @output {array} array of fields\n    *\n    ***********************************************/\n\n    fn.getFieldNames = function (dataExtensionKey) {\n      var de = DataExtension.Init(dataExtensionKey);\n      var fields = de.Fields.Retrieve();\n\n      fields.sort(function (a, b) { return (a.Ordinal > b.Ordinal) ? 1 : -1 });\n\n      var out = [];\n\n      for (k in fields) {\n        out = out.concat(fields[k].Name);\n      }\n\n      return out;\n\n    } //End retrieveFieldNames\n\n\n    /***********************************************\n    *\n    *   function formatResult()\n    *   Takes Objects that are Name/Value pairs {Name: \"Key\", Value: \"Value\"} and\n    *   normalizes them to a standard JSON object {key: \"value\"}\n    *\n    *    @peram {arr} array to normalize\n    *    @peram {prop} property key of Array\n    *\n    *    @output Array of normalized JSON object\n    *\n    ***********************************************/\n    fn.formatResult = function (arr, prop) {\n      var results = [];\n      for (var i = 0; i < arr.length; i++) {\n        var result_list = arr[i][prop];\n        var obj = {};\n        for (k in result_list) {\n          var key = result_list[k].Name;\n          var val = result_list[k].Value\n          if (key.indexOf(\"_\") != 0) obj[key] = val;\n        }\n        results.push(obj);\n      }\n      return results;\n    };\n\n\n    return fn\n  }\n\n</script>"
      },
      {
        "id": 110246,
        "bldrId": "4383ba6a-9808-4d1e-b0c6-1d419b1edb53",
        "name": "processing_api",
        "customerKey": "892b44fc-76c7-4815-9c4c-527f5d56aaca",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105287,
          "name": "backend",
          "parentId": 105286,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/backend"
        },
        "content": "<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n  Platform.Response.SetResponseHeader(\"Access-Control-Allow-Origin\", \"*\");\n  Platform.Response.SetResponseHeader('Strict-Transport-Security', 'max-age=200');\n  Platform.Response.SetResponseHeader('X-XSS-Protection', '1; mode=block');\n  Platform.Response.SetResponseHeader('X-Frame-Options', 'Deny');\n  Platform.Response.SetResponseHeader('X-Content-Type-Options', 'nosniff');\n  Platform.Response.SetResponseHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n  Platform.Response.SetResponseHeader('Content-Security-Policy', \"default-src 'self'\");\n\n  var postData = Platform.Request.GetPostData();\n  var postJSON = Platform.Function.ParseJSON(postData);\n\n  var action = Platform.Request.GetQueryStringParameter('action');\n  var payload = Platform.Request.GetQueryStringParameter('payload');\n\n  var applicationConfiguration = Platform.Function.ContentBlockByName('Content Builder\\\\Basetime Preference Center_demo_11\\\\configurations\\\\app_configuration')\n  var applicationConfigurationJSON = Platform.Function.ParseJSON(applicationConfiguration)\n  var map = applicationConfigurationJSON.map;\n\n  var preferenceCenterDataExtensionExternalKey = map.data_extension.preferenceCenterExternalKey;\n\n  Platform.Function.ContentBlockByName(map.content_block.ssjs.wsProxy)\n  Platform.Function.ContentBlockByName(map.content_block.ssjs.utils)\n\n  var fns = {\n    utils: util(),\n    wsProxy: wsProxy()\n  }\n\n  // var utils = util();\n  // var wsFn = wsProxy();\n\n  var res = '';\n  var reqConfig = {};\n\n  //Begin API Control Block\n  //Run specific set of code/functions based on the 'action' parameter\n  //After code is finished, the 'response' function returns the output and 'break' stops the processing\n  switch (action) {\n    case 'submitPreferenceForm': \n      var updateData = postJSON.postData;\n      var payload = [];\n\n      for (var u = 0; u < updateData.length; u++) {\n        var update = updateData[u]\n\n        payload.push({\n          CustomerKey: preferenceCenterDataExtensionExternalKey,\n          Properties: update\n        })\n      }\n\n      //update item\n      reqConfig = {\n        soapObjName: \"DataExtensionObject\",\n        options: {\n          SaveOptions: [{\n            PropertyName: \"*\",\n            SaveAction: \"UpdateAdd\"\n          }]\n        },\n        payload: payload\n      }\n\n      var updatePreferences = fns.wsProxy.update(reqConfig);\n      res = updatePreferences;\n    \n      break;\n\n\n    case 'getCurrentPreferences':\n      var preferences;\n\n      reqConfig = {\n        dataExtensionKey: preferenceCenterDataExtensionExternalKey,\n        cols: [],\n        filter: {\n          Property: \"subscriberId\",\n          SimpleOperator: \"equals\",\n          Value: postJSON.subscriberId\n        }\n      };\n\n      var preferenceRequest = fns.utils.getDERecords(reqConfig, fns);\n\n      if (preferenceRequest.Status === 'OK') {\n        preferences = fns.utils.formatResult(preferenceRequest.Results, 'Properties')\n        res = {\n          Status: 'OK',\n          Results: preferences\n        }\n      } else {\n        res = preferenceRequest;\n      }\n\n      break;\n  };\n\n  fns.utils.response(res)\n\n\n</script>"
      },
      {
        "id": 110247,
        "bldrId": "15d9f932-296f-42fd-8441-236109a87be0",
        "name": "_component_imports",
        "customerKey": "c0594a21-a351-4e6c-8dea-37e428b085e1",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock",
          "displayName": "Code Snippet Block"
        },
        "category": {
          "id": 105290,
          "name": "components",
          "parentId": 105289,
          "folderPath": "Content Builder/Basetime Preference Center_demo_11/frontend/components"
        },
        "content": "%%=TreatAsContent(ContentBlockByName('Content Builder\\Basetime Preference Center_demo_11\\frontend\\styles\\submit_button_animation'))=%%\n%%=TreatAsContent(ContentBlockByName('Content Builder\\Basetime Preference Center_demo_11\\lib\\validation\\subscriber_validation'))=%%\n\n<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n\n  var applicationConfiguration = Platform.Function.ContentBlockByName('Content Builder\\\\Basetime Preference Center_demo_11\\\\configurations\\\\app_configuration')\n  var applicationConfigurationJSON = Platform.Function.ParseJSON(applicationConfiguration)\n  var map = applicationConfigurationJSON.map;\n\n  var preferenceOptions = Platform.Function.ContentBlockByName(map.content_block.preference_options)\n  var channelDrawer = Platform.Function.ContentBlockByName(map.content_block.channel_drawer)\n  var preferenceForm = Platform.Function.ContentBlockByName(map.content_block.preference_form)\n  var unauthorizedUser = Platform.Function.ContentBlockByName(map.content_block.unauthorized_user)\n  var brandingBar = Platform.Function.ContentBlockByName(map.content_block.branding_bar)\n  var appJS = Platform.Function.ContentBlockByName(map.content_block.app_js)\n\n</script>\n\n%%=Concat('<sc','rip','t>')=%%\n\n  Vue.use(VueToast, {\n  position: 'top-right',\n  duration: 6000,\n  dismissable: true\n  });\n\n  Vue.use(VueFormulate)\n\n  const applicationConfiguration = <ctrl:var name=applicationConfiguration />\n  const preferenceOptions = <ctrl:var name=preferenceOptions />\n\n  const channelKeys = Object.keys(preferenceOptions.channels);\n  const channelSelection = channelKeys[0];\n\n  const isAuthorized = <ctrl:var name=authorized />\n  const subscriberId = <ctrl:var name=subscriberId />\n  const emailAddress = <ctrl:var name=emailAddress />\n  const subscriberKey = <ctrl:var name=subscriberKey />\n  const jobId = <ctrl:var name=jobId />\n\n  <ctrl:var name=appJS />\n  <ctrl:var name=channelDrawer />\n  <ctrl:var name=preferenceForm />\n  <ctrl:var name=unauthorizedUser />\n  <ctrl:var name=brandingBar />\n\n  %%=Concat('</sc','rip','t>')=%%"
      }
    ]
  },
  "configurationId": "88373-3939983zjfdal3-93830s9",
  "commitDate": "2022-10-04T16:38:19.638Z"
}